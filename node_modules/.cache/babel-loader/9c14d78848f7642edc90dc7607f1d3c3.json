{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialCartState = {\n  items: [],\n  totalQuantity: 0,\n  totalAmount: 0\n};\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: initialCartState,\n  reducers: {\n    addItem(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.items.find(item => item.id === newItem.id);\n\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          title: newItem.title,\n          totalPrice: newItem.price\n        });\n      } else {\n        existingItem.quantity++;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      }\n\n      state.totalQuantity++;\n    },\n\n    removeItem(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n\n      if (existingItem.quantity > 1) {\n        existingItem.quantity--;\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n      } else {\n        state.items = state.items.filter(item => item.id !== id);\n      }\n\n      state.totalQuantity--;\n    }\n\n  }\n});\nexport const cartActions = cartSlice.actions;\nexport default cartSlice;","map":{"version":3,"sources":["/Users/rico/Dropbox/Mac/Desktop/code/redux-cart/src/store/cart-slice.js"],"names":["createSlice","initialCartState","items","totalQuantity","totalAmount","cartSlice","name","initialState","reducers","addItem","state","action","newItem","payload","existingItem","find","item","id","push","price","quantity","title","totalPrice","removeItem","filter","cartActions","actions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,gBAAgB,GAAG;AACxBC,EAAAA,KAAK,EAAE,EADiB;AAExBC,EAAAA,aAAa,EAAE,CAFS;AAGxBC,EAAAA,WAAW,EAAE;AAHW,CAAzB;AAMA,MAAMC,SAAS,GAAGL,WAAW,CAAC;AAC7BM,EAAAA,IAAI,EAAE,MADuB;AAE7BC,EAAAA,YAAY,EAAEN,gBAFe;AAG7BO,EAAAA,QAAQ,EAAE;AACTC,IAAAA,OAAO,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACtB,YAAMC,OAAO,GAAGD,MAAM,CAACE,OAAvB;AACA,YAAMC,YAAY,GAAGJ,KAAK,CAACR,KAAN,CAAYa,IAAZ,CAAkBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYL,OAAO,CAACK,EAA/C,CAArB;;AACA,UAAI,CAACH,YAAL,EAAmB;AAClBJ,QAAAA,KAAK,CAACR,KAAN,CAAYgB,IAAZ,CAAiB;AAChBD,UAAAA,EAAE,EAAEL,OAAO,CAACK,EADI;AAEhBE,UAAAA,KAAK,EAAEP,OAAO,CAACO,KAFC;AAGhBC,UAAAA,QAAQ,EAAE,CAHM;AAIhBC,UAAAA,KAAK,EAAET,OAAO,CAACS,KAJC;AAKhBC,UAAAA,UAAU,EAAEV,OAAO,CAACO;AALJ,SAAjB;AAOA,OARD,MAQO;AACNL,QAAAA,YAAY,CAACM,QAAb;AACAN,QAAAA,YAAY,CAACQ,UAAb,GAA0BR,YAAY,CAACQ,UAAb,GAA0BV,OAAO,CAACO,KAA5D;AACA;;AACDT,MAAAA,KAAK,CAACP,aAAN;AACA,KAjBQ;;AAkBToB,IAAAA,UAAU,CAACb,KAAD,EAAQC,MAAR,EAAgB;AACzB,YAAMM,EAAE,GAAGN,MAAM,CAACE,OAAlB;AACA,YAAMC,YAAY,GAAGJ,KAAK,CAACR,KAAN,CAAYa,IAAZ,CAAkBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYA,EAAvC,CAArB;;AACA,UAAIH,YAAY,CAACM,QAAb,GAAwB,CAA5B,EAA+B;AAC9BN,QAAAA,YAAY,CAACM,QAAb;AACAN,QAAAA,YAAY,CAACQ,UAAb,GAA0BR,YAAY,CAACQ,UAAb,GAA0BR,YAAY,CAACK,KAAjE;AACA,OAHD,MAGO;AACNT,QAAAA,KAAK,CAACR,KAAN,GAAcQ,KAAK,CAACR,KAAN,CAAYsB,MAAZ,CAAoBR,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYA,EAAzC,CAAd;AACA;;AACDP,MAAAA,KAAK,CAACP,aAAN;AACA;;AA5BQ;AAHmB,CAAD,CAA7B;AAmCA,OAAO,MAAMsB,WAAW,GAAGpB,SAAS,CAACqB,OAA9B;AAEP,eAAerB,SAAf","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialCartState = {\n\titems: [],\n\ttotalQuantity: 0,\n\ttotalAmount: 0,\n};\n\nconst cartSlice = createSlice({\n\tname: \"cart\",\n\tinitialState: initialCartState,\n\treducers: {\n\t\taddItem(state, action) {\n\t\t\tconst newItem = action.payload;\n\t\t\tconst existingItem = state.items.find((item) => item.id === newItem.id);\n\t\t\tif (!existingItem) {\n\t\t\t\tstate.items.push({\n\t\t\t\t\tid: newItem.id,\n\t\t\t\t\tprice: newItem.price,\n\t\t\t\t\tquantity: 1,\n\t\t\t\t\ttitle: newItem.title,\n\t\t\t\t\ttotalPrice: newItem.price,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\texistingItem.quantity++;\n\t\t\t\texistingItem.totalPrice = existingItem.totalPrice + newItem.price;\n\t\t\t}\n\t\t\tstate.totalQuantity++;\n\t\t},\n\t\tremoveItem(state, action) {\n\t\t\tconst id = action.payload;\n\t\t\tconst existingItem = state.items.find((item) => item.id === id);\n\t\t\tif (existingItem.quantity > 1) {\n\t\t\t\texistingItem.quantity--;\n\t\t\t\texistingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n\t\t\t} else {\n\t\t\t\tstate.items = state.items.filter((item) => item.id !== id);\n\t\t\t}\n\t\t\tstate.totalQuantity--;\n\t\t},\n\t},\n});\n\nexport const cartActions = cartSlice.actions;\n\nexport default cartSlice;\n"]},"metadata":{},"sourceType":"module"}